'''Manage all logs generated by sherlock stream'''
import ast
import logging
from typing import Union

from sherlock.sherlock_types import TYPES
from sherlock.sherlock_data.code_data import Line


SHERLOCK_LOG_LEVEL = 9999
START_LOG_MESSAGE = 'Sherlock Stream Logging Started'


class Log4Sherlock:


    def __init__(self, handler = logging.FileHandler('sherlock.log')):

        self._logger = logging.getLogger(name='SHERLOCK')
        self._logger.addFilter(SherlockLogFilter())
        self._handler = handler
        self._logger.addHandler(handler)


    def startLogger(self):

        logging.basicConfig(format='%(message)s', level=SHERLOCK_LOG_LEVEL)
        self.getLogger().log(SHERLOCK_LOG_LEVEL, START_LOG_MESSAGE)


    def getLogger(self):
        return self._logger


class SherlockLogFilter(logging.Filter):


    def filter(self, record):
        message = record.getMessage()
        for ssTypes in TYPES:
            if message.startswith(ssTypes):
                return True
        return False


class SherlockLogParser:

    def __init__(self, line: str) -> None:
        self.line: Line = self.parse(line)


    def parse(self, line: str) -> Union[Line,None]:
        if line not in [START_LOG_MESSAGE]:
            newLine = Line()

            if line.startswith('FunctionCall'):
                newLine = self.parseFunctionCall(line)                    
        else:
            return None
    
    def parseFunctionCall(self):
        #TODO: use re to get all the values related values
        breakpoint()
    
if __name__ == '__main__':
    # Log4Sherlock().startLogger()
    parser = SherlockLogParser("""FunctionCall(name='index', line='/home/victor/workspace/UniPortal/application/main/controllers.py::15::0::21::54')""")